Test for add_integer.
======================
Usage add_integer(a, b)
=======================

	>>> add_integer = __import__('0-add_integer').add_integer

Test with a:float b:int
        >>> add_integer(2.2, 5)
        7

Test with a:float b:float
        >>> add_integer(3.0, 5.2)
        8

Test with a:int b:int
        >>> add_integer(4, -2)
        2

Test with a:int b:int
        >>> add_integer(-32, -9)
        -41

Test with a:int b:default
        >>> add_integer(100)
        198

Test with a:string b:int
        >>> add_integer("str", 23)
        Traceback (most recent call last):
        TypeError: a must be an integer

Test with a:float b:dict
        >>> add_integer(3.5, {1: 'a'})
        Traceback (most recent call last):
        TypeError: b must be an integer

Test with a:string b:string
        >>> add_integer("a", "b")
        Traceback (most recent call last):
        TypeError: a must be an integer

Test with a:None b:default
        >>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

Test with a:int b:nan
	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
	
Test with a:nan b:default
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
	
Test with a:inf b:default
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	ValueError: cannot convert float infinity to integer
	
Test with a:int b:inf
	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	ValueError: cannot convert float infinity to integer
